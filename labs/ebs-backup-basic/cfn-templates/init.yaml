AWSTemplateFormatVersion: "2010-09-09"
Description: "Root stack for the EBS Backup challenge"

Parameters:
  SnapshotId:
    Type: "String"
    Description: "The snapshot ID to restore from"
    Default: ""

Conditions:
  HasSnapshot: !Not [!Equals [!Ref SnapshotId, ""]]

Mappings:
  RegionMap:
    us-east-1:
      AMI: "ami-0b72821e2f351e396"

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsHostnames: true

  Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.0.0/24"
      AvailabilityZone: !Select
        - "0"
        - !GetAZs ""

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  Route:
    Type: "AWS::EC2::Route"
    DependsOn: "AttachGateway"
    Properties:
      RouteTableId: !Ref RouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: "0.0.0.0/0"

  SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow HTTP traffic"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"

        - IpProtocol: "tcp"
          FromPort: "3000"
          ToPort: "3000"
          CidrIp: "0.0.0.0/0"
          Description: "Allow HTTP traffic on port 3000 for the backend server"

  EC2Instance:
    Type: "AWS::EC2::Instance"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              docker: []
              git: []
          commands:
            mount-secondary-ebs:
              command: !Sub |
                #!/bin/bash
                systemctl enable docker
                systemctl start docker
                if [ "${SnapshotId}" = "" ]; then
                  mkfs -t ext4 /dev/xvdb
                fi
                mkdir -p /mnt/data
                mount /dev/xvdb /mnt/data
                chown 1000:1000 /mnt/data
                echo '/dev/xvdb /mnt/data ext4 defaults,nofail 0 2' >> /etc/fstab
                git clone https://github.com/phamtrongngh/aws-challenges.git /home/ec2-user/aws-challenges
                cd /home/ec2-user/aws-challenges/labs/ebs-backup/backend
                docker build -t app .
                docker run -d -p 3000:3000 -e REPO_FILE_PATH=/mnt/data/repo.txt -v /mnt/data:/mnt/data app
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
    Properties:
      InstanceType: "t2.micro"
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      KeyName: "cloudformation"
      Tags:
        - Key: "Name"
          Value: "ebs-deep-dive"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -s ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}
          /opt/aws/bin/cfn-hup
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}

      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 8
            VolumeType: "gp2"
            DeleteOnTermination: true

        - DeviceName: "/dev/sdb"
          Ebs:
            VolumeSize: 8
            VolumeType: "gp2"
            DeleteOnTermination: true
            SnapshotId: !If [HasSnapshot, !Ref SnapshotId, !Ref "AWS::NoValue"]

      NetworkInterfaces:
        - DeviceIndex: "0"
          AssociatePublicIpAddress: "true"
          DeleteOnTermination: "true"
          SubnetId: !Ref Subnet
          GroupSet:
            - !Ref SecurityGroup

Outputs:
  InstanceId:
    Value: !Ref EC2Instance
    Description: "Instance ID"

  PublicIp:
    Value: !GetAtt EC2Instance.PublicIp
    Description: "Public IP"

  PublicDnsName:
    Value: !GetAtt EC2Instance.PublicDnsName
    Description: "Public DNS"

  VPCId:
    Value: !Ref VPC
    Description: "VPC ID"

  SubnetId:
    Value: !Ref Subnet
    Description: "Subnet ID"
